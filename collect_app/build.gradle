apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply from: '../config/quality.gradle'
apply from: '../config/jacoco.gradle'

import com.android.ddmlib.DdmPreferences

DdmPreferences.setTimeOut(60000)

ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix') {
    os(family: 'unix')
}

// smap delete out the auto setting of version numbers

def secretsFile = file('secrets.properties')
def secrets = new Properties()
if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
}
def googleMapsApiKey = secrets.getProperty('GOOGLE_MAPS_API_KEY', '')
def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')

android {
    compileSdkVersion(28)

    viewBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "org.smap.smapTask.android"
        minSdkVersion(21)
        targetSdkVersion(28)
        versionCode(6300)
        versionName getVersionName()
        testInstrumentationRunner('androidx.test.runner.AndroidJUnitRunner')
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = 'fieldTask'      // smap
    }

    signingConfigs {
        release {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                storeFile file(secrets.getProperty('RELEASE_STORE_FILE'))
                storePassword secrets.getProperty('RELEASE_STORE_PASSWORD')
                keyAlias secrets.getProperty('RELEASE_KEY_ALIAS')
                keyPassword secrets.getProperty('RELEASE_KEY_PASSWORD')
            }
        }
    }

    flavorDimensions "flavour"

    productFlavors {
        standard {
            applicationId "org.smap.smapTask.android"
            versionName "6.300"
        }
        plan {
            applicationId "org.smap.smapTask.android.plan"
            versionName "6.300-plan"
        }
        kontrolid {
            applicationId "org.smap.smapTask.android.kontrolid"
            versionName "6.300-kontrolid"
        }
        supply {
            applicationId "org.smap.smapTask.android.supply"
            versionName "6.300-supply"
        }
        seracis {
            applicationId "org.smap.smapTask.android.seracis"
            versionName "6.300-seracis"
        }
        meqa {
            applicationId "org.smap.smapTask.android.meqa"
            versionName "6.300-meqa"
        }
        atempi {
            applicationId "org.smap.smapTask.android.atempi"
            versionName "6.300-atempi"
        }
        pop {
            applicationId "org.smap.smapTask.android.pop"
            versionName "6.300-pop"
        }
        tdh {
            applicationId "org.smap.smapTask.android.tdh"
            versionName "6.300-tdh"
        }
        assignfield {
            applicationId "org.smap.smapTask.android.assignfield"
            versionName "6.300-assignfield"
        }
        informEd {
            applicationId "org.smap.smapTask.android.informEd"
            versionName "6.300-informEd"
        }
    }

    buildTypes {

        // Release build for all forks
        release {
            buildConfigField("String", "SENDER_ID", "\"" + secrets['SENDER_ID'] + "\"")    // smap
            buildConfigField("String", "AWS_MOBILEHUB_USER_AGENT", "\"" + secrets['AWS_MOBILEHUB_USER_AGENT'] + "\"")   // smap
            buildConfigField("String", "AMAZON_COGNITO_REGION", "\"" + secrets['AMAZON_COGNITO_REGION'] + "\"")         // smap
            buildConfigField("String", "AMAZON_COGNITO_IDENTITY_POOL_ID", "\"" + secrets['AMAZON_COGNITO_IDENTITY_POOL_ID'] + "\"")   // smap
            buildConfigField("String", "AMAZON_DYNAMODB_REGION", "\"" + secrets['AMAZON_DYNAMODB_REGION'] + "\"")  // smap

            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("bool", "CRASHLYTICS_ENABLED", "true")
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            buildConfigField 'String', "MAPBOX_ACCESS_TOKEN", '"' + mapboxToken + '"'

            matchingFallbacks = ['release'] // So other modules use release build type for this
        }

        debug {
            buildConfigField("String", "SENDER_ID", "\"" + secrets['SENDER_ID'] + "\"")    // smap
            buildConfigField("String", "AWS_MOBILEHUB_USER_AGENT", "\"" + secrets['AWS_MOBILEHUB_USER_AGENT'] + "\"")
            // smap
            buildConfigField("String", "AMAZON_COGNITO_REGION", "\"" + secrets['AMAZON_COGNITO_REGION'] + "\"")
            // smap
            buildConfigField("String", "AMAZON_COGNITO_IDENTITY_POOL_ID", "\"" + secrets['AMAZON_COGNITO_IDENTITY_POOL_ID'] + "\"")
            // smap
            buildConfigField("String", "AMAZON_DYNAMODB_REGION", "\"" + secrets['AMAZON_DYNAMODB_REGION'] + "\"")
            // smap


            debuggable(true)
            testCoverageEnabled((findProperty("enableJacoco") ?: "false").toBoolean())
            resValue("bool", "CRASHLYTICS_ENABLED", "false")
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            buildConfigField 'String', "MAPBOX_ACCESS_TOKEN", '"' + mapboxToken + '"'
            //FirebasePerformance {    // smap commented
            //    instrumentationEnabled false
            //}
        }
    }

    // https://stackoverflow.com/a/27119543/152938
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }
    testVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }

    packagingOptions {
        // Pick first occurrence of any files that cause conflicts, as defined
        // in common.gradle
        pickFirst 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/NOTICE.txt'
        pickFirst 'META-INF/services/com.fasterxml.jackson.core.JsonFactory'
        pickFirst 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyReader'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyWriter'

        // To ensure that ODK Collect is installable on all devices, we don't use
        // abiFilters to exclude any ABIs; but to keep the APK slim, we include
        // the Mapbox native library only for 32-bit and 64-bit ARM devices and
        // omit it for all X86 devices.
        exclude 'lib/x86/libmapbox-gl.so'
        exclude 'lib/x86_64/libmapbox-gl.so'
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')

        force('com.google.code.findbugs:jsr305:1.3.9')
    }
    transitive = true
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.5'

    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.work:work-runtime:2.3.4"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference:1.1.1'
    implementation "androidx.fragment:fragment:${rootProject.fragmentVersion}"

    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.android:flexbox:2.0.1'

    implementation "com.google.android.gms:play-services-auth:18.0.0"
    implementation "com.google.android.gms:play-services-maps:17.0.0"
    implementation "com.google.android.gms:play-services-location:17.0.0"
    implementation "com.google.firebase:firebase-messaging:20.2.4"      // smap synchronisation

    implementation 'com.google.firebase:firebase-perf:19.0.7'
    implementation 'com.google.firebase:firebase-analytics:17.4.1'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'

    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.2.1'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0'

    implementation("com.google.guava:guava:29.0-android")

    implementation "com.squareup.okhttp3:okhttp:${rootProject.okhttp3Version}"
    implementation 'com.burgstaller:okhttp-digest:2.3'

    implementation 'com.github.mohamadian:PersianJodaTime:1.2'
    implementation 'com.github.chanmratekoko:myanmar-calendar:1.0.6.RC3'
    //implementation 'bikramsambat:bikram-sambat:1.1.0'
    implementation "com.rarepebble:colorpicker:3.0.1"
    implementation "commons-io:commons-io:2.6"
    implementation "net.sf.opencsv:opencsv:2.4"
    // smap comment out reference to maven repository version of javarosa will use a local version instead
    //implementation("org.getodk:javarosa:3.0.2") {
    //    exclude group: 'joda-time'
    //    exclude group: 'org.slf4j'
    //}

    implementation('net.sf.kxml:kxml2:2.3.0')                       // smap javarosa dependency
    implementation files('libs/javarosa-3.0.3.jar')    // smap javarosa

    implementation "com.karumi:dexter:6.1.2"
    implementation "org.osmdroid:osmdroid-android:6.1.6"
    implementation("com.google.api-client:google-api-client-android:1.30.9") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-drive:v3-rev20200413-1.30.9") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-sheets:v4-rev20200508-1.30.9") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }

    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation "org.slf4j:slf4j-api:2.0.0-alpha0"
    implementation "com.arcao:slf4j-timber:3.1@aar"

    //updating to 3.4.0 requires minSdkVersion >=24 https://github.com/zxing/zxing/releases/tag/zxing-3.4.0
    implementation "com.google.zxing:core:3.3.0"

    //updating would require minSdkVersion >=24
    implementation "com.journeyapps:zxing-android-embedded:3.6.0"

    implementation "net.danlew:android.joda:2.10.6"

    // Real LeakCanary for debug builds only: notifications, analysis, etc
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'

    // Android Architecture Components:
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // smap aws
    implementation 'com.amazonaws:aws-android-sdk-core:2.16.+'
    //implementation 'com.amazonaws:aws-android-sdk-core:2.4.2'
    // add the DynamoDB SDK and DynamoDB Object Mapper dependency
    implementation 'com.amazonaws:aws-android-sdk-ddb:2.16.+'
    implementation 'com.amazonaws:aws-android-sdk-ddb-mapper:2.16.+'
    implementation project(':AWSMobileHelper')

    // charts
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.2'

    // Dagger:
    implementation "com.google.dagger:dagger:${rootProject.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"

    // Needed for injection into Robolectric tests
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"


    // Dagger Android:
    implementation "com.google.dagger:dagger-android:${rootProject.daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${rootProject.daggerVersion}"

    // RxJava 2:
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.19"

    // Better "Subjects" for Rx:
    implementation "com.jakewharton.rxrelay2:rxrelay:2.1.1"

    implementation project(':nbi-stubs')
    implementation project(':material')
    implementation project(':async')

    // Makes binding to Views easy:
    implementation "com.jakewharton:butterknife:10.2.1"
    annotationProcessor "com.jakewharton:butterknife-compiler:10.2.1"

    // Annotations understood by FindBugs
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    // Used to generate documentation screenshots.
    androidTestImplementation "tools.fastlane:screengrab:2.0.0"

    // Testing-only dependencies
    testImplementation "junit:junit:4.13"
    testImplementation "org.mockito:mockito-core:3.3.3"

    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation 'androidx.test.ext:junit:1.1.1'
    debugImplementation "androidx.fragment:fragment-testing:${rootProject.fragmentVersion}"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.robolectric:shadows-multidex:4.3.1"
    testImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp-tls:${rootProject.okhttp3Version}"

    // power mock (for mocking final methods which is not handled by mockito)
    testImplementation "org.powermock:powermock-module-junit4:2.0.7"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.7"

    testImplementation "org.json:json:20190722"

    androidTestImplementation "org.mockito:mockito-android:3.3.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation("androidx.test.espresso:espresso-intents:3.2.0") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.okhttp3Version}"

    androidTestImplementation "androidx.work:work-testing:2.3.4"
}

// Must be at bottom to prevent dependency collisions
// https://developers.google.com/android/guides/google-services-plugin
apply plugin: 'com.google.gms.google-services'



